/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.shadowflight.openapi.api

import com.skydoves.sandwich.ApiResponse
import retrofit2.http.*
import retrofit2.Response
import okhttp3.RequestBody
import com.squareup.moshi.Json
import com.shadowflight.openapi.model.ApiErrorDTO
import com.shadowflight.openapi.model.AppUserArticleDTO
import com.shadowflight.openapi.model.AppUserRecommendationDTO
import com.shadowflight.openapi.model.FeedSectionDTO
import com.shadowflight.openapi.model.UpdateRatingDTO
import com.shadowflight.openapi.model.UpdateStatusDTO

interface AppUserRecommendationApi {

    /**
     * A list of content filtered by topic.
     * 
     * Responses:
     *  - 200: OK
     *  - 401: Unauthorized
     *
     * @param topicId 
     * @return [kotlin.collections.List<AppUserRecommendationDTO>]
     */
    @GET("api/v1/me/recommendations/explore/topics/{topicId}")
    suspend fun exploreContentByTopic(@Path("topicId") topicId: kotlin.Int): ApiResponse<kotlin.collections.List<AppUserRecommendationDTO>>

    /**
     * Get article.
     * 
     * Responses:
     *  - 200: OK
     *  - 401: Unauthorized
     *
     * @param recommendationId 
     * @return [AppUserArticleDTO]
     */
    @GET("api/v1/me/recommendations/articles/{recommendationId}")
    suspend fun getArticle(@Path("recommendationId") recommendationId: kotlin.String): ApiResponse<AppUserArticleDTO>

    /**
     * Recommendations feed.
     * 
     * Responses:
     *  - 200: OK
     *  - 401: Unauthorized
     *
     * @return [kotlin.collections.List<FeedSectionDTO>]
     */
    @GET("api/v1/me/recommendations/feed")
    suspend fun getFeed(): ApiResponse<kotlin.collections.List<FeedSectionDTO>>

    /**
     * A list of most popular content.
     * 
     * Responses:
     *  - 200: OK
     *  - 401: Unauthorized
     *
     * @return [kotlin.collections.List<AppUserRecommendationDTO>]
     */
    @GET("api/v1/me/recommendations/most_popular")
    suspend fun getMostPopularContent(): ApiResponse<kotlin.collections.List<AppUserRecommendationDTO>>

    /**
     * A list of newest content.
     * 
     * Responses:
     *  - 200: OK
     *  - 401: Unauthorized
     *
     * @return [kotlin.collections.List<AppUserRecommendationDTO>]
     */
    @GET("api/v1/me/recommendations/newest")
    suspend fun getNewestContent(): ApiResponse<kotlin.collections.List<AppUserRecommendationDTO>>

    /**
     * A list of starting recommendations.
     * 
     * Responses:
     *  - 200: OK
     *  - 401: Unauthorized
     *
     * @return [kotlin.collections.List<AppUserRecommendationDTO>]
     */
    @GET("api/v1/me/recommendations/starting")
    suspend fun getStartingRecommendations(): ApiResponse<kotlin.collections.List<AppUserRecommendationDTO>>

    /**
     * A list of tailored recommendations filtered by topic.
     * 
     * Responses:
     *  - 200: OK
     *  - 401: Unauthorized
     *
     * @param topicId 
     * @return [kotlin.collections.List<AppUserRecommendationDTO>]
     */
    @GET("api/v1/me/recommendations/tailored/topics/{topicId}")
    suspend fun getTailoredRecommendationsByTopic(@Path("topicId") topicId: kotlin.Int): ApiResponse<kotlin.collections.List<AppUserRecommendationDTO>>

    /**
     * A list of recommendations which are improved by the preferences.
     * 
     * Responses:
     *  - 200: OK
     *  - 401: Unauthorized
     *
     * @return [kotlin.collections.List<AppUserRecommendationDTO>]
     */
    @GET("api/v1/me/recommendations/preferred")
    suspend fun getUserPreferredRecommendations(): ApiResponse<kotlin.collections.List<AppUserRecommendationDTO>>

    /**
     * Set recommendation rating.
     * 
     * Responses:
     *  - 204: No Content
     *  - 401: Unauthorized
     *
     * @param updateRatingDTO 
     * @return [Unit]
     */
    @PUT("api/v1/me/recommendations/rating")
    suspend fun setRating(@Body updateRatingDTO: UpdateRatingDTO): ApiResponse<Unit>

    /**
     * Set recommendation status.
     * 
     * Responses:
     *  - 204: No Content
     *  - 401: Unauthorized
     *
     * @param updateStatusDTO 
     * @return [Unit]
     */
    @PUT("api/v1/me/recommendations/status")
    suspend fun setStatus(@Body updateStatusDTO: UpdateStatusDTO): ApiResponse<Unit>
}
